public class test.Tester2 extends java.lang.Object
{

    public void <init>()
    {
        test.Tester2 this;

        this := @this: test.Tester2;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    static int bar1(int)
    {
        int x, x;

        x := @parameter0: int;
        x = x * 5;
        return x;
    }

    static int bar2(int)
    {
        int x, y, x;
        java.util.Scanner $r0, sc1;
        java.io.InputStream $r1;

        x := @parameter0: int;
        $r0 = new java.util.Scanner;
        $r1 = <java.lang.System: java.io.InputStream in>;
        specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1);
        sc1 = $r0;
        y = virtualinvoke sc1.<java.util.Scanner: int nextInt()>();
        x = x * 5;
        return y;
    }

    static int foo(int, int)
    {
        int x, y, p, res;
        byte z;

        x := @parameter0: int;
        y := @parameter1: int;
        z = 5;
        if x <= y goto label0;

        p = staticinvoke <test.Tester2: int bar1(int)>(z);
        goto label1;

     label0:
        p = staticinvoke <test.Tester2: int bar2(int)>(5);

     label1:
        res = p;
        return res;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        java.util.Scanner $r0, sc;
        java.io.InputStream $r1;
        int n, k, a, b, c, d, e;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r5;

        args := @parameter0: java.lang.String[];
        $r0 = new java.util.Scanner;
        $r1 = <java.lang.System: java.io.InputStream in>;
        specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1);
        sc = $r0;
        n = virtualinvoke sc.<java.util.Scanner: int nextInt()>();
        k = virtualinvoke sc.<java.util.Scanner: int nextInt()>();
        a = staticinvoke <test.Tester2: int foo(int,int)>(n, k);
        b = staticinvoke <test.Tester2: int foo(int,int)>(n, 1);
        c = staticinvoke <test.Tester2: int foo(int,int)>(1, k);
        d = staticinvoke <test.Tester2: int bar2(int)>(1);
        e = staticinvoke <test.Tester2: int bar1(int)>(1);
        $r2 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(a);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(d);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(e);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
        return;
    }
}
